name: Backend CI/CD Pipeline

permissions:
  actions: read
  contents: read
  security-events: write

on:
  push:
    branches: ["main", "feature/**", "code-quality-fixes"]
    paths:
      - "**/*.py"
      - "**/*.yaml"
      - "**/*.toml"
      - "requirements.txt"
      - "Dockerfile"
      - ".github/workflows/**"
      - "!**/*.ipynb"
  pull_request:
    branches: ["main"]
    paths:
      - "**/*.py"
      - "**/*.yaml"
      - "**/*.toml"
      - "requirements.txt"
      - "Dockerfile"
      - ".github/workflows/**"
      - "!**/*.ipynb"
  workflow_dispatch:
    inputs:
      deploy_target:
        description: "Environment to deploy to"
        required: false
        default: "dev"
        type: choice
        options:
          - dev
          - staging

env:
  PYTHON_VERSION: "3.11"
  UV_LINK_MODE: copy

defaults:
  run:
    shell: bash

jobs:
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "${{ env.PYTHON_VERSION }}"

      - name: Install dependencies for security scanning
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Vulnerability scan with Safety
        run: safety scan -r requirements.txt --full-report

      - name: Source code security scanning with Bandit
        run: bandit -r backend -f json -o bandit.json

      - name: Upload Bandit results
        uses: actions/upload-artifact@v4
        with:
          name: bandit-results
          path: bandit.json

      # Trivy filesystem scan
      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: cache-trivy-${{ github.run_id }}
          restore-keys: |
            cache-trivy-

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.48.3
          sudo apt-get update && sudo apt-get install -y jq

      - name: Run Trivy filesystem scan
        env:
          TRIVY_NO_PROGRESS: true
          TRIVY_CACHE_DIR: ~/.cache/trivy
        run: |
          trivy --cache-dir ~/.cache/trivy image --download-db-only
          trivy fs --format sarif --output trivy-results.sarif --severity CRITICAL,HIGH --skip-dirs="notebooks/" --skip-dirs=".github/" .

      - name: Upload Trivy SARIF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

  lint-format-test:
    name: Lint, Format, and Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Setup UV
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "pyproject.toml"

      - name: Install dependencies
        run: |
          uv pip install --system pytest pytest-cov pytest-asyncio
          uv pip install --system -r requirements.txt
          uv pip install --system ruff mypy yamllint

      - name: Lint and format code with Ruff
        run: |
          ruff format --check .
          ruff check . --fix

      - name: Type check with MyPy
        run: mypy backend

      - name: Lint YAML files with Yamllint
        run: yamllint -c .yamllint .

      - name: Run Python tests
        run: |
          python -m pytest backend/tests

      - name: Run security scan with Safety
        run: |
          pip install safety
          safety scan -r requirements.txt --policy-file .safety-policy.yml

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up UV
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "pyproject.toml requirements.txt"

      - name: Install dependencies
        run: |
          uv pip install pytest pytest-cov pytest-asyncio
          uv pip install -r requirements.txt

      - name: Run Python tests
        run: pytest --cov=backend --cov-report=xml -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

  build-docker-image:
    name: Build and Push Docker Image
    needs: lint-format-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        if: ${{ env.ACT != 'true' && secrets.DOCKER_USERNAME != '' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          push: ${{ github.ref == 'refs/heads/main' && env.ACT != 'true' && secrets.DOCKER_USERNAME != '' }}
          tags: ${{ secrets.DOCKER_USERNAME || 'user' }}/timeseries:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            PYTHON_VERSION=${{ matrix.python-version }}

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
        if: always()

      # Trivy container scan
      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/timeseries-forecast:${{ github.sha }}
          format: "sarif"
          output: "trivy-container-results.sarif"
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy container scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-container-results.sarif
          category: container

  deploy:
    name: Deploy to Kubernetes
    needs: build-docker-image
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Configure environment
      - name: Configure environment
        id: config-env
        run: |
          if [ "${{ github.event.inputs.deploy_target }}" == "staging" ]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "namespace=timeseries-forecast-staging" >> $GITHUB_OUTPUT
            echo "config_secret=KUBE_CONFIG_STAGING" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "namespace=timeseries-forecast-dev" >> $GITHUB_OUTPUT
            echo "config_secret=KUBE_CONFIG_DEV" >> $GITHUB_OUTPUT
          fi

      # Set up kubectl
      - uses: azure/setup-kubectl@v3

      # Set up kubeconfig
      - name: Configure kubectl
        id: kubeconfig
        run: |
          mkdir -p $HOME/.kube
          CONFIG_EXISTS="false"
          if [ "${{ steps.config-env.outputs.config_secret }}" == "KUBE_CONFIG_STAGING" ]; then
            if [ -n "${{ secrets.KUBE_CONFIG_STAGING }}" ]; then
              echo "${{ secrets.KUBE_CONFIG_STAGING }}" > $HOME/.kube/config
              CONFIG_EXISTS="true"
              echo "config_exists=true" >> $GITHUB_OUTPUT
            else
              echo "config_exists=false" >> $GITHUB_OUTPUT
              echo "::warning::No Kubernetes config found for staging."
            fi
          else
            if [ -n "${{ secrets.KUBE_CONFIG_DEV }}" ]; then
              echo "${{ secrets.KUBE_CONFIG_DEV }}" > $HOME/.kube/config
              CONFIG_EXISTS="true"
              echo "config_exists=true" >> $GITHUB_OUTPUT
            else
              echo "config_exists=false" >> $GITHUB_OUTPUT
              echo "::warning::No Kubernetes config found for dev."
            fi
          fi

          if [ "$CONFIG_EXISTS" == "true" ]; then
            chmod 600 $HOME/.kube/config
          fi

      # Verify Kubernetes connectivity
      - name: Verify Kubernetes connectivity
        if: steps.kubeconfig.outputs.config_exists == 'true'
        id: verify-k8s
        continue-on-error: true
        run: |
          if kubectl cluster-info; then
            echo "k8s_connected=true" >> $GITHUB_OUTPUT
            kubectl create namespace ${{ steps.config-env.outputs.namespace }} --dry-run=client -o yaml | kubectl apply -f -
          else
            echo "k8s_connected=false" >> $GITHUB_OUTPUT
            echo "::warning::Kubernetes connection failed â€“ skipping deployment."
          fi

      # Update and apply deployment
      - name: Deploy to Kubernetes
        if: steps.verify-k8s.outputs.k8s_connected == 'true'
        run: |
          # Update deployment file if it exists
          if [ -f "k8s/deployment.yaml" ]; then
            sed -i "s|image:.*|image: ${{ secrets.DOCKER_USERNAME }}/timeseries-forecast:${{ github.sha }}|g" k8s/deployment.yaml
            kubectl apply -f k8s/deployment.yaml -n ${{ steps.config-env.outputs.namespace }}
            kubectl rollout status deployment/timeseries-forecast -n ${{ steps.config-env.outputs.namespace }} --timeout=120s
          else
            echo "::warning::k8s/deployment.yaml not found - skipping deployment."
          fi

      # Show deployment status
      - name: Show deployment status
        if: steps.verify-k8s.outputs.k8s_connected == 'true'
        run: |
          if [ -f "k8s/deployment.yaml" ]; then
            echo "=== Deployment status ==="
            kubectl get all -n ${{ steps.config-env.outputs.namespace }} -l app=timeseries-forecast
            echo "=== Deployment logs ==="
            kubectl logs -l app=timeseries-forecast -n ${{ steps.config-env.outputs.namespace }} --tail=50 || true
            echo "=== Events ==="
            kubectl get events -n ${{ steps.config-env.outputs.namespace }} --sort-by=.metadata.creationTimestamp | grep timeseries-forecast || true
          fi
